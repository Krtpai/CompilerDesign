(Program
  (Comment
    (CommentContent: ~~ Declaration Statements
    )
  )
  (DeclarationStatement
    (VariableDeclaration
      (Keyword: int
      )
      (IDENTIFIER: x
      )
      (AssignmentOperator: =
      )
      (Expression
        (Literal: 1
        )
      )
      (Delimiter: ;
      )
    )
  )
  (DeclarationStatement
    (VariableDeclaration
      (Keyword: int
      )
      (IDENTIFIER: y
      )
      (Delimiter: ;
      )
    )
  )
  (DeclarationStatement
    (VariableDeclaration
      (Keyword: int
      )
      (IDENTIFIER: z
      )
      (Delimiter: ,
      )
      (IDENTIFIER: v
      )
      (AssignmentOperator: =
      )
      (Expression
        (Literal: 20
        )
      )
      (Delimiter: ,
      )
      (IDENTIFIER: f
      )
      (AssignmentOperator: =
      )
      (Expression
        (ArithmeticExpr
          (Literal: 3
          )
          (ArithmeticOperator: +
          )
          (Literal: 1
          )
        )
      )
      (Delimiter: ;
      )
    )
  )
  (InputStatement
    (Keyword: input
    )
    (Delimiter: (
    )
    (InputList
      (FormatVariablePair
        (FormatString: "hello pogi%"
        )
        (Delimiter: ,
        )
        (AddressVariable
          (Delimiter: &
          )
          (IDENTIFIER: value
          )
        )
      )
    )
    (Delimiter: )
    )
    (Delimiter: ;
    )
  )
  (OutputStatement
    (Keyword: printf
    )
    (Delimiter: (
    )
    (OutputList
      (STRING_LITERAL: "Hello"
      )
    )
    (Delimiter: )
    )
    (Delimiter: ;
    )
  )
  (OutputStatement
    (Keyword: printf
    )
    (Delimiter: (
    )
    (OutputList
      (STRING_LITERAL: "%f"
      )
      (Delimiter: ,
      )
      (IDENTIFIER: value
      )
    )
    (Delimiter: )
    )
    (Delimiter: ;
    )
  )
  (OutputStatement
    (Keyword: printf
    )
    (Delimiter: (
    )
    (OutputList
      (STRING_LITERAL: "Value is %d"
      )
      (Delimiter: ,
      )
      (IDENTIFIER: value
      )
    )
    (Delimiter: )
    )
    (Delimiter: ;
    )
  )
  (AssignmentStatement
    (IDENTIFIER: totalGWA
    )
    (AssignmentOperator: =
    )
    (Expression
      (Literal: 2
      )
    )
    (Delimiter: ;
    )
  )
  (AssignmentStatement
    (IDENTIFIER: totalNum
    )
    (AssignmentOperator: +=
    )
    (Expression
      (Identifier: addedPrice
        (IDENTIFIER: addedPrice
        )
      )
    )
    (Delimiter: ;
    )
  )
  (AssignmentStatement
    (AssignmentStatement
      (IDENTIFIER: midtermScore
      )
      (AssignmentOperator: =
      )
      (Expression
        (Identifier: exam
          (IDENTIFIER: exam
          )
        )
      )
    )
    (AssignmentOperator: =
    )
    (Expression
      (Identifier: deptals
        (IDENTIFIER: deptals
        )
      )
    )
    (Delimiter: ;
    )
  )
  (ConditionalStatement
    (Keyword: if
    )
    (Delimiter: (
    )
    (RelationalExpr
      (Identifier: i
        (IDENTIFIER: i
        )
      )
      (RelationalOperator: >
      )
      (Literal: 5
      )
    )
    (Delimiter: )
    )
    (Block
      (Delimiter: {
      )
      (OutputStatement
        (Keyword: printf
        )
        (Delimiter: (
        )
        (OutputList
          (STRING_LITERAL: "Hello, World"
          )
        )
        (Delimiter: )
        )
        (Delimiter: ;
        )
      )
      (Delimiter: }
      )
    )
  )
  (ConditionalStatement
    (Keyword: if
    )
    (Delimiter: (
    )
    (RelationalExpr
      (Identifier: i
        (IDENTIFIER: i
        )
      )
      (RelationalOperator: >
      )
      (Literal: 5
      )
    )
    (Delimiter: )
    )
    (Block
      (Delimiter: {
      )
      (ConditionalStatement
        (Keyword: if
        )
        (Delimiter: (
        )
        (RelationalExpr
          (Identifier: i
            (IDENTIFIER: i
            )
          )
          (RelationalOperator: >
          )
          (Literal: 10
          )
        )
        (Delimiter: )
        )
        (Block
          (Delimiter: {
          )
          (OutputStatement
            (Keyword: printf
            )
            (Delimiter: (
            )
            (OutputList
              (STRING_LITERAL: "Hello, World"
              )
            )
            (Delimiter: )
            )
            (Delimiter: ;
            )
          )
          (Delimiter: }
          )
        )
        (Keyword: else
        )
        (Keyword: if
        )
        (Delimiter: (
        )
        (RelationalExpr
          (Identifier: i
            (IDENTIFIER: i
            )
          )
          (RelationalOperator: >
          )
          (Literal: 15
          )
        )
        (Delimiter: )
        )
        (Block
          (Delimiter: {
          )
          (OutputStatement
            (Keyword: printf
            )
            (Delimiter: (
            )
            (OutputList
              (STRING_LITERAL: "Ma, anong ulam?"
              )
            )
            (Delimiter: )
            )
            (Delimiter: ;
            )
          )
          (Delimiter: }
          )
        )
        (Keyword: else
        )
        (Block
          (Delimiter: {
          )
          (OutputStatement
            (Keyword: printf
            )
            (Delimiter: (
            )
            (OutputList
              (STRING_LITERAL: "Ulam, anong mama?"
              )
            )
            (Delimiter: )
            )
            (Delimiter: ;
            )
          )
          (Delimiter: }
          )
        )
      )
      (Delimiter: }
      )
    )
  )
  (ForLoop
    (Keyword: for
    )
    (Delimiter: (
    )
    (ForInit
      (Keyword: int
      )
      (IDENTIFIER: i
      )
      (AssignmentOperator: =
      )
      (Expression
        (Literal: 0
        )
      )
    )
    (Expression
      (RelationalExpr
        (Identifier: i
          (IDENTIFIER: i
          )
        )
        (RelationalOperator: <
        )
        (Literal: 5
        )
      )
    )
    (ForUpdate
      (UnaryExpr
        (IDENTIFIER: i
        )
        (UnaryOperator: ++
        )
      )
    )
    (Block
      (Delimiter: {
      )
      (OutputStatement
        (Keyword: printf
        )
        (Delimiter: (
        )
        (OutputList
          (STRING_LITERAL: "Ulam, anong mama?"
          )
        )
        (Delimiter: )
        )
        (Delimiter: ;
        )
      )
      (Delimiter: }
      )
    )
  )
  (ForLoop
    (Keyword: for
    )
    (Delimiter: (
    )
    (ForInit
      (Keyword: int
      )
      (IDENTIFIER: i
      )
      (AssignmentOperator: =
      )
      (Expression
        (Literal: 0
        )
      )
    )
    (Expression
      (RelationalExpr
        (Identifier: i
          (IDENTIFIER: i
          )
        )
        (RelationalOperator: <
        )
        (Literal: 5
        )
      )
    )
    (ForUpdate
      (UnaryExpr
        (IDENTIFIER: i
        )
        (UnaryOperator: ++
        )
      )
    )
    (Block
      (Delimiter: {
      )
      (ForLoop
        (Keyword: for
        )
        (Delimiter: (
        )
        (ForInit
          (Keyword: int
          )
          (IDENTIFIER: j
          )
          (AssignmentOperator: =
          )
          (Expression
            (Literal: 0
            )
          )
        )
        (Expression
          (RelationalExpr
            (Identifier: j
              (IDENTIFIER: j
              )
            )
            (RelationalOperator: <
            )
            (Identifier: i
              (IDENTIFIER: i
              )
            )
          )
        )
        (ForUpdate
          (UnaryExpr
            (IDENTIFIER: j
            )
            (UnaryOperator: ++
            )
          )
        )
        (Block
          (Delimiter: {
          )
          (OutputStatement
            (Keyword: printf
            )
            (Delimiter: (
            )
            (OutputList
              (STRING_LITERAL: "Ulam, anong mama?"
              )
            )
            (Delimiter: )
            )
            (Delimiter: ;
            )
          )
          (Delimiter: }
          )
        )
      )
      (Delimiter: }
      )
    )
  )
)
